name: ci

on:
  push:
    branches: [main]
  pull_request:

env:
  FOUNDRY_PROFILE: ci
  INFURA_KEY: ${{ secrets.INFURA_KEY }}

jobs:
  # lint-markdown:
  #   name: "Markdown Linting"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Lint markdown files
  #       uses: docker://avtodev/markdown-lint:v1
  #       with:
  #         args: "**/*.md"

  check:
    name: "Format & Lint"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Check Solidity formatting
        run: forge fmt --check

      - name: Check contract sizes
        run: forge build --sizes

  build:
    name: "Build & Compile"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Restore cached build
        uses: actions/cache/restore@v4
        id: cache-build-restore
        with:
          path: |
            cache
            out
          key: foundry-build-${{ hashFiles('src/**', 'lib/**', 'foundry.toml') }}
          restore-keys: |
            foundry-build-

      - name: Build contracts
        run: forge build

      - name: Cache build artifacts
        uses: actions/cache/save@v4
        if: always()
        with:
          path: |
            cache
            out
          key: foundry-build-${{ hashFiles('src/**', 'lib/**', 'foundry.toml') }}

  test-unit:
    name: "Unit Tests"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Restore build cache
        uses: actions/cache/restore@v4
        with:
          path: |
            cache
            out
          key: foundry-build-${{ hashFiles('src/**', 'lib/**', 'foundry.toml') }}
          restore-keys: |
            foundry-build-

      - name: Run unit tests
        run: forge test --match-path "test/unit/**/*.sol" -vvv

  test-integration:
    name: "Integration Tests"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Restore build cache
        uses: actions/cache/restore@v4
        with:
          path: |
            cache
            out
          key: foundry-build-${{ hashFiles('src/**', 'lib/**', 'foundry.toml') }}
          restore-keys: |
            foundry-build-

      - name: Run integration tests
        run: forge test --match-path "test/integration/**/*.sol" -vvv

  test-invariant:
    name: "Invariant Tests"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Restore build cache
        uses: actions/cache/restore@v4
        with:
          path: |
            cache
            out
          key: foundry-build-${{ hashFiles('src/**', 'lib/**', 'foundry.toml') }}
          restore-keys: |
            foundry-build-

      - name: Run invariant tests
        run: forge test --match-path "test/invariant/**/*.sol" -vvv

  test-attacks:
    name: "Attack Vector Tests"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Restore build cache
        uses: actions/cache/restore@v4
        with:
          path: |
            cache
            out
          key: foundry-build-${{ hashFiles('src/**', 'lib/**', 'foundry.toml') }}
          restore-keys: |
            foundry-build-

      - name: Run attack tests
        run: forge test --match-path "test/attacks/**/*.sol" -vvv

  snapshot:
    name: "Gas Snapshot Check"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Restore build cache
        uses: actions/cache/restore@v4
        with:
          path: |
            cache
            out
          key: foundry-build-${{ hashFiles('src/**', 'lib/**', 'foundry.toml') }}
          restore-keys: |
            foundry-build-

      - name: Check gas snapshots
        run: |
          forge snapshot --check --tolerance 2 \
            --no-match-path "test/invariant/**/*.sol" \
            --no-match-test "testFuzz"
        env:
          FOUNDRY_FUZZ_SEED: 0x42

  coverage:
    name: "Test Coverage"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Restore build cache
        uses: actions/cache/restore@v4
        with:
          path: |
            cache
            out
          key: foundry-build-${{ hashFiles('src/**', 'lib/**', 'foundry.toml') }}
          restore-keys: |
            foundry-build-

      - name: Run coverage
        run: forge coverage --report summary --report lcov

      - name: Install lcov
        run: sudo apt-get update && sudo apt-get install -y lcov

      - name: Filter coverage
        run: |
          lcov --remove lcov.info \
            'test/*' 'script/*' 'lib/*' \
            --output-file lcov.info \
            --rc branch_coverage=1

      - name: Generate coverage report
        uses: romeovs/lcov-reporter-action@v0.3.1
        if: github.event_name == 'pull_request'
        with:
          delete-old-comments: true
          lcov-file: ./lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify minimum coverage
        uses: zgosalvez/github-actions-report-lcov@v3
        with:
          coverage-files: ./lcov.info
          minimum-coverage: 90
